// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

// 生成到指定包名下

package rpc_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GIMRequest struct {
	RequestID            int64    `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	ReqMsg               string   `protobuf:"bytes,2,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
	MsgType              int32    `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GIMRequest) Reset()         { *m = GIMRequest{} }
func (m *GIMRequest) String() string { return proto.CompactTextString(m) }
func (*GIMRequest) ProtoMessage()    {}
func (*GIMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *GIMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GIMRequest.Unmarshal(m, b)
}
func (m *GIMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GIMRequest.Marshal(b, m, deterministic)
}
func (m *GIMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GIMRequest.Merge(m, src)
}
func (m *GIMRequest) XXX_Size() int {
	return xxx_messageInfo_GIMRequest.Size(m)
}
func (m *GIMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GIMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GIMRequest proto.InternalMessageInfo

func (m *GIMRequest) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *GIMRequest) GetReqMsg() string {
	if m != nil {
		return m.ReqMsg
	}
	return ""
}

func (m *GIMRequest) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type GIMResponse struct {
	ResponseID           int64    `protobuf:"varint,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	ResMsg               string   `protobuf:"bytes,2,opt,name=resMsg,proto3" json:"resMsg,omitempty"`
	MsgType              int32    `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GIMResponse) Reset()         { *m = GIMResponse{} }
func (m *GIMResponse) String() string { return proto.CompactTextString(m) }
func (*GIMResponse) ProtoMessage()    {}
func (*GIMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *GIMResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GIMResponse.Unmarshal(m, b)
}
func (m *GIMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GIMResponse.Marshal(b, m, deterministic)
}
func (m *GIMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GIMResponse.Merge(m, src)
}
func (m *GIMResponse) XXX_Size() int {
	return xxx_messageInfo_GIMResponse.Size(m)
}
func (m *GIMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GIMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GIMResponse proto.InternalMessageInfo

func (m *GIMResponse) GetResponseID() int64 {
	if m != nil {
		return m.ResponseID
	}
	return 0
}

func (m *GIMResponse) GetResMsg() string {
	if m != nil {
		return m.ResMsg
	}
	return ""
}

func (m *GIMResponse) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func init() {
	proto.RegisterType((*GIMRequest)(nil), "rpc_service.GIMRequest")
	proto.RegisterType((*GIMResponse)(nil), "rpc_service.GIMResponse")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0x2a, 0x48, 0x8e, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x55, 0x8a, 0xe1, 0xe2, 0x72, 0xf7, 0xf4, 0x0d, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0xe2, 0x2c, 0x82, 0x30, 0x3d, 0x5d, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x98, 0x83, 0x10, 0x02, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0x85, 0xbe, 0xc5, 0xe9,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x71, 0x7a,
	0x48, 0x65, 0x41, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x8c, 0xab, 0x14, 0xcf, 0xc5,
	0x0d, 0x36, 0xbd, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8e, 0x8b, 0xab, 0x08, 0xca, 0x86,
	0x9b, 0x8f, 0x24, 0x02, 0xb1, 0xa0, 0x18, 0xc5, 0x82, 0x62, 0xbc, 0x16, 0x18, 0xf9, 0x81, 0x9d,
	0x1f, 0x0c, 0xf1, 0x8c, 0x90, 0x03, 0x17, 0xbb, 0x73, 0x46, 0x62, 0x5e, 0x5e, 0x6a, 0x8e, 0x90,
	0xb8, 0x1e, 0x92, 0x2f, 0xf5, 0x10, 0x5e, 0x94, 0x92, 0xc0, 0x94, 0x80, 0xd8, 0xaf, 0xc1, 0x68,
	0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x22, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xe3, 0x5d,
	0xb0, 0x33, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GIMServiceClient is the client API for GIMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GIMServiceClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (GIMService_ChannelClient, error)
}

type gIMServiceClient struct {
	cc *grpc.ClientConn
}

func NewGIMServiceClient(cc *grpc.ClientConn) GIMServiceClient {
	return &gIMServiceClient{cc}
}

func (c *gIMServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (GIMService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GIMService_serviceDesc.Streams[0], "/rpc_service.GIMService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &gIMServiceChannelClient{stream}
	return x, nil
}

type GIMService_ChannelClient interface {
	Send(*GIMRequest) error
	Recv() (*GIMResponse, error)
	grpc.ClientStream
}

type gIMServiceChannelClient struct {
	grpc.ClientStream
}

func (x *gIMServiceChannelClient) Send(m *GIMRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gIMServiceChannelClient) Recv() (*GIMResponse, error) {
	m := new(GIMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GIMServiceServer is the server API for GIMService service.
type GIMServiceServer interface {
	Channel(GIMService_ChannelServer) error
}

// UnimplementedGIMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGIMServiceServer struct {
}

func (*UnimplementedGIMServiceServer) Channel(srv GIMService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}

func RegisterGIMServiceServer(s *grpc.Server, srv GIMServiceServer) {
	s.RegisterService(&_GIMService_serviceDesc, srv)
}

func _GIMService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GIMServiceServer).Channel(&gIMServiceChannelServer{stream})
}

type GIMService_ChannelServer interface {
	Send(*GIMResponse) error
	Recv() (*GIMRequest, error)
	grpc.ServerStream
}

type gIMServiceChannelServer struct {
	grpc.ServerStream
}

func (x *gIMServiceChannelServer) Send(m *GIMResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gIMServiceChannelServer) Recv() (*GIMRequest, error) {
	m := new(GIMRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GIMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_service.GIMService",
	HandlerType: (*GIMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _GIMService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
